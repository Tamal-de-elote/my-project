# This workflow builds a Java project with Gradle, then builds and pushes a Docker image.
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the repository code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Set up the Java Development Kit (JDK)
      # Using version 1.8 as specified, but consider using a newer LTS version like 11, 17, or 21 if your project supports it.
      - name: Set up JDK 8
        uses: actions/setup-java@v4
        with:
          java-version: '8'
          distribution: 'temurin' # Adoptium Temurin is a popular, open-source distribution

      # Step 3: Make the Gradle wrapper executable
      # This ensures the script has the necessary permissions to run.
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # Step 4: Build the project with Gradle
      # This command compiles the code, runs tests, and packages the application.
      - name: Build with Gradle
        run: ./gradlew build

      # Step 5: Log in to Docker Hub
      # Uses an access token stored in GitHub secrets for secure authentication.
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      # Step 6: Build and push the Docker image
      # This uses official Docker actions and creates a unique tag for each commit.
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: celso12354/celso:${{ github.sha }} # Creates a unique tag based on the commit SHA
